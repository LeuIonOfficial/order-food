// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String?
  phone         String?
  address       String?
  city          String?
  avatar        String?
  isCook        Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  isVerified    Boolean   @default(false)
  emailVerified DateTime?
  rating        Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  products      Product[]
  orders        Order[]    @relation("CustomerOrders")
  reviews       Review[]   @relation("CustomerReviews")
  cookReviews   Review[]   @relation("CookReviews")
  cookOrders    Order[]    @relation("CookOrders")

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  currency    String   @default("MDL")
  image       String
  category    String
  isAvailable Boolean  @default(true)
  isApproved  Boolean  @default(false)
  cookId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cook    User     @relation(fields: [cookId], references: [id], onDelete: Cascade)
  orders  OrderItem[]
  reviews Review[]

  @@map("products")
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  cookId     String
  status     OrderStatus @default(PENDING)
  total      Float
  currency   String      @default("MDL")
  address    String
  phone      String
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  customer User       @relation("CustomerOrders", fields: [customerId], references: [id])
  cook     User       @relation("CookOrders", fields: [cookId], references: [id])
  items    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  customerId String
  cookId     String
  productId  String?
  createdAt  DateTime @default(now())

  // Relations
  customer User     @relation("CustomerReviews", fields: [customerId], references: [id])
  cook     User     @relation("CookReviews", fields: [cookId], references: [id])
  product  Product? @relation(fields: [productId], references: [id])

  @@map("reviews")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
} 